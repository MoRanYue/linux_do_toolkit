name: Build Tauri Application

on:
  push:
    tags: 
      - 'v*' # 在推送版本标签时触发构建
  workflow_dispatch: # 允许手动触发

env:
  PROJECT_NAME: "linux_do_toolkit"

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04, macos-12, windows-2022]
        include:
          - platform: ubuntu-22.04
            os: linux
            rust_target: x86_64-unknown-linux-gnu
            artifact_name: linux
          - platform: ubuntu-22.04
            os: linux
            rust_target: aarch64-unknown-linux-gnu
            artifact_name: linux
          - platform: macos-12
            os: macos
            rust_target: x86_64-apple-darwin
            artifact_name: macos
          - platform: macos-12
            os: macos
            rust_target: aarch64-apple-darwin
            artifact_name: macos
          - platform: windows-2022
            os: windows
            rust_target: x86_64-pc-windows-msvc
            artifact_name: windows
          - platform: windows-2022
            os: windows
            rust_target: aarch64-pc-windows-msvc
            artifact_name: windows

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set version for non-tag builds
        if: !startsWith(github.ref, 'refs/tags/')
        run: echo "VERSION=$(date +'%Y.%m.%d-dev')" >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos'
        run: |
          brew update
          brew install libappindicator

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolbox@v1
        with:
          target: ${{ matrix.rust_target }}
          toolchain: stable

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the application
        run: npm run tauri build -- --target ${{ matrix.rust_target }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Find and rename built files
        run: |
          # 查找构建文件并重命名
          if [ "${{ matrix.os }}" = "linux" ]; then
            find src-tauri/target/${{ matrix.rust_target }}/release -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read file; do
              filename=$(basename "$file")
              extension="${filename##*.}"
              new_name="${PROJECT_NAME}_v${VERSION}_${{ matrix.artifact_name }}_${{ matrix.rust_target }}.${extension}"
              mv "$file" "$new_name"
              echo "BUILT_FILE=$new_name" >> $GITHUB_ENV
            done
          elif [ "${{ matrix.os }}" = "macos" ]; then
            find src-tauri/target/${{ matrix.rust_target }}/release -name "*.dmg" -o -name "*.app" | while read file; do
              filename=$(basename "$file")
              extension="${filename##*.}"
              new_name="${PROJECT_NAME}_v${VERSION}_${{ matrix.artifact_name }}_${{ matrix.rust_target }}.${extension}"
              mv "$file" "$new_name"
              echo "BUILT_FILE=$new_name" >> $GITHUB_ENV
            done
          elif [ "${{ matrix.os }}" = "windows" ]; then
            find src-tauri/target/${{ matrix.rust_target }}/release -name "*.msi" -o -name "*.exe" | while read file; do
              filename=$(basename "$file")
              extension="${filename##*.}"
              new_name="${PROJECT_NAME}_v${VERSION}_${{ matrix.artifact_name }}_${{ matrix.rust_target }}.${extension}"
              mv "$file" "$new_name"
              echo "BUILT_FILE=$new_name" >> $GITHUB_ENV
            done
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILT_FILE }}
          path: ${{ env.BUILT_FILE }}
